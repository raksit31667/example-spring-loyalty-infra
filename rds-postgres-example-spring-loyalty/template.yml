AWSTemplateFormatVersion: "2010-09-09"
Description: "Template for RDS PostgreSQL for example-spring-loyalty"

Resources:
  ExampleSpringLoyaltyPostgreSQL:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: example-spring-loyalty-db
      DBName: ExampleSpringLoyalty
      DBInstanceClass: db.t3.micro
      DBParameterGroupName: !Ref ExampleSpringLoyaltyPostgreSQLParameterGroup
      AllocatedStorage: 20
      Engine: postgres
      EngineVersion: 13.3
      MasterUsername:
        Fn::Sub: "{{resolve:secretsmanager:${ExampleSpringLoyaltyPostgreSQLSecret}::username}}"
      MasterUserPassword:
        Fn::Sub: "{{resolve:secretsmanager:${ExampleSpringLoyaltyPostgreSQLSecret}::password}}"
      Port: 5432
      PubliclyAccessible: true
      StorageEncrypted: false
      EnableCloudwatchLogsExports:
        - postgresql
      VPCSecurityGroups:
        - !GetAtt ExampleSpringLoyaltyPostgreSQLSecurityGroup.GroupId

  ExampleSpringLoyaltyPostgreSQLSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: ExampleSpringLoyaltyPostgreSQLSecret
      Description: "This secret has a dynamically generated secret password."
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '"@/\/?'

  ExampleSpringLoyaltyPostgreSQLSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref ExampleSpringLoyaltyPostgreSQLSecret
      TargetId: !Ref ExampleSpringLoyaltyPostgreSQL
      TargetType: AWS::RDS::DBInstance

  ExampleSpringLoyaltyPostgreSQLParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: "Parameter group to enable pgaudit"
      Family: "postgres13"
      Parameters:
        pgaudit.role: "rds_pgaudit"
        shared_preload_libraries: pg_stat_statements,pgaudit
        log_connections: on

  VpcPeeringBuildkiteAgentRds:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      PeerVpcId: !GetAtt ExampleSpringLoyaltyPostgreSQLSecurityGroup.VpcId
      VpcId: vpc-0ce72f8445f66b6cf

  ExampleSpringLoyaltyPostgreSQLSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ExampleSpringLoyaltyPostgreSQLSecurityGroup
      GroupDescription: Security group to whitelist access by IP

  ExampleSpringLoyaltyPostgreSQLBastionHostWhitelist:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: !Sub ['${BastionHostPrivateIP}/32', BastionHostPrivateIP: !ImportValue ExampleSpringLoyaltyPostgreSQLBastionHostPrivateIP]
      Description: Used to restrict RDS public access to only bastion host example-spring-loyalty-db-bastion-host
      FromPort: 5432
      ToPort: 5432
      IpProtocol: tcp
      GroupId: !GetAtt ExampleSpringLoyaltyPostgreSQLSecurityGroup.GroupId

  # Add route: All traffic to (destination) the RDS VPC CIDR block is via the VPC Peering Connection (target)
  VpcPeeringBuildkiteAgentRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 172.31.0.0/16
      RouteTableId: rtb-037c996623b5a6fca
      VpcPeeringConnectionId: !Ref VpcPeeringBuildkiteAgentRds

  # Add route: All traffic to (destination) the EKS cluster CIDR block is via the VPC Peering Connection (target)
  VpcPeeringRdsRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 10.0.0.0/16
      RouteTableId: rtb-0bc45e8cfe39f9737
      VpcPeeringConnectionId: !Ref VpcPeeringBuildkiteAgentRds

  ExampleSpringLoyaltyIngressTrafficFromBuildkiteAgentToRdsWhitelist:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: 10.0.0.0/16
      Description: Used to allow all ingress traffic from the Buildkite agent to the RDS instance
      FromPort: 5432
      ToPort: 5432
      IpProtocol: tcp
      GroupId: !GetAtt ExampleSpringLoyaltyPostgreSQLSecurityGroup.GroupId
